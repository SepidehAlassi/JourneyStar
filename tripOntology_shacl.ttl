@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix : <http://www.mysemantics.com/ontology/trip/> .

:PersonShape a sh:NodeShape  ;
    sh:targetClass :Person ;
    sh:property [
        sh:path schema:givenName ;
       # sh:minCount 1 ;
        sh:languageIn ("en" "de") ;
        sh:datatype xsd:string ;
    ] ,
    [
        sh:path schema:familyName ;
       # sh:minCount 1 ;
        sh:datatype xsd:string ;
    ] ,
    [
        sh:path schema:name ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
    ],
    [
        sh:path owl:sameAs ;
        sh:datatype xsd:anyURI ;
    ],
    [
        sh:path :gnd ;
        sh:datatype xsd:string ;
    ],
    [
        sh:path schema:gender ;
        sh:in (schema:Female schema:Male)
    ],
    [
        sh:path schema:birthDate ;
        sh:minCount 1 ; # every person should have exactly one birthdate
        sh:maxCount 1 ;
        sh:datatype xsd:date ;
    ],
    [
        sh:path :hasDisability ;
        sh:datatype xsd:string ;
    ],
    [
        sh:path :hasParent ;
        sh:node :PersonShape ;
    ] ,
    [
        sh:path :livedIn ;
        sh:node :LocationShape ;
    ] ,
    [
        sh:path schema:birthPlace ;
        sh:node :LocationShape ;
    ],
    [
        sh:path schema:knows ; # the object of schema:knows should be a resource of type :Location or :Person
        sh:or ([sh:class :Location ] ,
               [sh:class :Person ]) ;
    ],
    [
        sh:path :nationality ;
        sh:datatype xsd:string ;
    ],
    [
        sh:path :hasSighted;
        sh:or ([sh:class :Architecuture ] ,  # if you want to just define the range of property without asking it to be validated against a shape, then use sh:class
               [sh:class :Landscape ] ,
               [sh:class :Occurence ] ,
               [sh:class :Person ]) ;
    ],
    [
        sh:path :travelledTo ;
        sh:node :LocationShape ;
    ],
    [
        sh:path :hasEmployment ;
        sh:class schema:Occupation ;
    ],
     [
        sh:path :participatedIn ;
        sh:node :ActivityShape ;
    ] .


### Shape for Class Location ###
:LocationShape a sh:NodeShape  ;
    sh:targetClass trip:Location ;
    sh:property
    [
        sh:path :hasGeonameID ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
    ] ,
    [
        sh:path schema:name ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
    ] ,
    [
        sh:path :hasWikiLink ;
        sh:minCount 1 ;
        sh:datatype xsd:anyURI ;
    ] ,
	  [
        sh:path :hasAlternativeName ;
        sh:datatype xsd:string ;
    ],
    [
        sh:path schema:address;
        sh:datatype xsd:string;
    ] .


:StayShape a sh:NodeShape  ;
    sh:targetClass :Stay ;
    sh:property
    [
        sh:path :Location ;
        sh:maxCount 1 ;
        #sh:languageIn ("en" "de" ) ;
    ] ,
    [
        sh:path :arrival ;
        #sh:minCount 1 ;
        sh:datatype xsd:dateTime ; ## add here or add in hasNameShape that it must be schema:name > xsd:string
    ] ,
    [
        sh:path :departure ;
       # sh:minCount 1 ;
        sh:datatype xsd:dateTime ;
    ] ,
	  [
        sh:path :hasAccommodation ;
        sh:datatype :AccommodationShape ;
    ],
	  [
        sh:path :hasComment ;
        sh:datatype xsd:string ;
    ] .


### TODO: Add node shapes for all classes defined in the Ontology

##########################################
#### Property shapes for RDF-star triples
##########################################

:accordingToPropertyShape
    	a sh:PropertyShape ;
    	sh:path :accordingTo ;
    	sh:description "Represents the person who is source of a fact." ;
    	sh:node :PersonShape .


:mentionedInPropertyShape
    	a sh:PropertyShape ;
    	sh:path :mentionedIn ;
    	sh:description "Represents the document that is source of a fact." ;
    	sh:node :DocumentShape . # define the DocumenShape

#TODO: define property shapes for all properties with an object that is a triple
